<?php
/**
 * @file
 * isbn2node module
 */

// Define the url's for fetching ISBN-data.
define('ISBN2NODE_ISBNDB_URL', 'http://isbndb.com/api/books.xml?access_key=%access_key&results=details&index1=isbn&value1=%isbn_value');

// URL for Open Library API endpoint for ISBN searches.
define('ISBN2NODE_OPENLIBRARY_ISBN_URL', 'https://openlibrary.org/search.json?isbn=%isbn_value');

// Define the url's for fetching cover files.
define('ISBN2NODE_OPENLIBRARY_COVER_URL', 'https://covers.openlibrary.org/b/isbn/%isbn-%size.jpg');

// Define the url's for searching for titles.
define('ISBN2NODE_ISBNDB_TITLE_URL', 'http://isbndb.com/api/books.xml?access_key=%access_key&results=details&index1=title&value1=%title_value');
define('ISBN2NODE_OPENLIBRARY_TITLE_URL', 'https://openlibrary.org/search.json?q=%title_value');

// Load internal module functions.
include_once 'isbn2node.internal.inc';


/**
 * Implements hook_perm().
 */
function isbn2node_permission() {
  return array(
    'configure isbn2node' => array(
      'title' => t('Administer ISBN2node'),
      'description' => t('Allow user to control settings for fetching book information through ISBNdb or Open Library.'),
    ),
    'add by isbn' => array(
      'title' => t('Add by ISBN'),
      'description' => t('Allow user to add a book via ISBN.'),
    ),
    'bulk add by isbn' => array(
      'title' => t('Bulk add by ISBN'),
      'description' => t('Allow user to use bulk add via ISBN.'),
    ),
  );
}


/**
 * Implements hook_menu().
 * Configures which users can add books using this module.
 */
function isbn2node_menu() {
  $items = array();

  // Settings menu.
  $items['admin/config/content/isbn2node'] = array(
    'title' => 'ISBN to node',
    'description' => 'Configure ISBN lookup.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('isbn2node_settings_form'),
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('configure isbn2node'),
  );

  // Add ISBN book via lookup.
  $items['node/add/isbn2node-book/isbn2node'] = array(
    'title' => 'Look up by ISBN',
    'description' => 'Enter the ISBN for a book and populate an ISBN-book record based on the data fetched.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('isbn2node_add_form'),
    'type' => MENU_NORMAL_ITEM | MENU_LOCAL_TASK,
    'access arguments' => array('add by isbn'),
    'weight' => 10,
  );

  // Add ISBN book via lookup.
  $items['node/add/isbn2node-book/isbn2node/%'] = array(
    'title' => 'Look up by ISBN',
    'description' => 'Enter the ISBN for a book and populate an ISBN-book record based on the data fetched.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('isbn2node_add_form', 4),
    'type' => MENU_NORMAL_ITEM | MENU_LOCAL_TASK,
    'access arguments' => array('add by isbn'),
    'weight' => 10,
  );

  // Bulk add books using a list of ISBNs.
  $items['node/add/isbn2node-book/bulk'] = array(
    'title' => 'ISBN book bulk import',
    'description' => 'Enter a series of ISBN and create nodes based on lookups.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('isbn2node_bulk_form'),
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('bulk add by isbn'),
    'weight' => 20,
    'file' => 'isbn2node.bulk.inc',
  );

  // Title / keyword search.
  $items['node/add/isbn2node-book/title'] = array(
    'title' => 'Title/ keyword search',
    'description' => 'Search for books through keywords, e.g. title and author.',
    'page callback' => 'backdrop_get_form',
    'page arguments' => array('isbn2node_title_form'),
    'type' => MENU_LOCAL_TASK,
    'access arguments' => array('add by isbn'),
    'weight' => 30,
  );

  // Add an ISBN book taking the ISBN from the URL.
  $items['node/add/isbn2node_book/manual/%'] = array(
    'title' => 'ISBN book with ISBN filled out',
    'description' => 'Go to the form and fill out ISBN from URL.',
    'page callback' => 'isbn2node_add_manual',
    'page arguments' => array(4),
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer nodes'),
  );

  return $items;
}


/**
 * Implements hook_config_info().
 */
function isbn2node_config_info() {
  $prefixes['isbn2node.settings'] = array(
    'label' => t('ISBN2Node settings'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Create the module settings form.
 *
 * This form serves both as the launch form for the debug run
 * and as the result display when it has run.
 */
function isbn2node_settings_form($form, &$form_state) {
  $config = config('isbn2node.settings');

  $form = array();
  $form['#config'] = 'isbn2node.settings';

  $form['isbn2node_db'] = array(
    '#title' => t('Book database to use'),
    '#type' => 'radios',
    '#options' => array(
      'isbndb' => 'ISBNdb',
      'openlib' => 'Open Libary',
    ),
    '#default_value' => $config->get('isbn2node_db'),
    '#required' => TRUE,
    '#description' => t('If you use ISBNdb you must aquire and enter an access key below'),
  );

  $form['isbn2node_isbndb_access_key'] = array(
    '#title' => t('ISBNdb access key'),
    '#type' => 'textfield',
    '#default_value' => $config->get('isbn2node_isbndb_access_key'),
    '#description' => t('Your ISBNdb access key. <a href="@url">How to sign up and generate this key</a>.', array('@url' => '/admin/help/isbn2node')),
  );

  return system_settings_form($form);
}


/**
 * Handle submission of the settings form.
 * Backdrop handles saving the settings to the config file upon submission,
 * so no need for an isbn2node_settings_form_submit function.
 */


/*
 * Present the add single ISBN form.
 *
 * @param string $isbn 
 *   ISBN to look for.
 * @return form
 *   Returns the form for adding a (single) book using its ISBN.
 */
function isbn2node_add_form($form, &$form_state, $isbn = '') {
  $form = array();

  if (_isbn2node_check_settings($form)) {

    $form['isbn'] = array(
      '#title' => t('ISBN'),
      '#type' => 'textfield',
      '#required' => TRUE,
      '#default_value' => $isbn,
      '#description' => t('Enter the 10- or 13-digit ISBN for the book.'),
    );

    // Buttons.
    $form['buttons']['save'] = array(
      '#type' => 'submit',
      '#value' => t('Search'),
      '#weight' => 140,
    );

    $form['buttons']['cancel'] = array(
      '#markup' => l(t('Cancel'), 'node/add'),
      '#weight' => 150,
    );
  }

  return $form;
}


/*
 * Validate the add single ISBN form
 */
function isbn2node_add_form_validate($form) {

  // Check for an existing book with this ISBN.
  $isbn = _isbn2book_normalize_isbn($form['isbn']['#value']);
  $result = _isbn2node_isbn_exists($isbn);

  // Anything? Set a form error.
  if ($result) {
    form_error($form['isbn'], t('You already have <a href="@view">a book with the ISBN @isbn</a>.<br /><a href="@edit">Edit it here</a>, or <a href="@delete">delete it</a> before adding it again.',
      array(
      '@isbn' => $isbn,
      '@view' => url('node/' . $result['entity_id']),
      '@edit' => url('node/' . $result['entity_id'] . '/edit'),
      '@delete' => url('node/' . $result['entity_id'] . '/delete'),
    )));
  }

  $vals = _isbn2book_fetch_data($isbn);

  if (is_array($vals)) {
    $success = $vals['success'];
  }
  else {
    $success = $vals->success;
  }

  if (!$success) {
    form_error($form['isbn'], t('Didn\'t find any results on the ISBN @isbn. <a href="!url">Create a book manually with this ISBN</a>?',
                                array('@isbn' => $isbn, '!url' => url('node/add/isbn2node_book/manual/' . $isbn))));
  }
}


/*
 * Submit handler for the add single ISBN form.
 * Fetches book data and goes on to the normal node/add form.
 *
 * @param array $form
 *   The "search by ISBN" form object.
 * @param array $form_state
 *   The current form values.
 */
function isbn2node_add_form_submit($form, &$form_state) {
  // Fetch book data and parse it.
  $isbn = _isbn2book_normalize_isbn($form_state['values']['isbn']);
  $vals = _isbn2book_fetch_data($isbn);
  $isbn2book_data = _isbn2node_parse($vals, $isbn);

  // Insert ISBN into book data array.
  $isbn2book_data['isbn2node_isbn'] = $isbn;
  //_isbn2node_debug('isbn2book_data', $isbn2book_data);

  // Save data for next step.
  // @todo This ought to be session based to avoid clashes with other users' node submissions.
  config_set('isbn2node.settings', 'isbn2node_data', serialize($isbn2book_data));

  // Go on to create a new node of the "isbn2node-book" content type, which
  // will use the data we just saved.
  backdrop_goto('node/add/isbn2node-book');
}


/*
 * Add a book "manually" by giving its ISBN in the url. Goes to
 * the node/add form with only the ISBN pre-filled.
 *
 * @param string $isbn
 *   The ISBN of the book to add.
 */
function isbn2node_add_manual($isbn) {

  // Fetch book data and parse it.
  $isbn = _isbn2book_normalize_isbn($isbn);
  $isbn2book_data = array();

  // Insert ISBN into book data array.
  $isbn2book_data['isbn2node_isbn'] = $isbn;

  // Save data for next step.
  // This ought to be session based to avoid clashes with other user's node submissions.
  config_set('isbn2node.settings', 'isbn2node_data', serialize($isbn2book_data));
  backdrop_goto('node/add/isbn2node-book');
}


/*
 * Implements hook_form_alter()
 */
function isbn2node_form_alter(&$form, &$form_state, $form_id) {

  switch ($form_id) {

    // We only intervene on node form for a new node of the right node type.
    case 'isbn2node_book_node_form':
      // _isbn2node_debug('form', $form);

      // Add custom submit handler to node submit.
      $form['actions']['submit']['#submit'] = array_merge(array('isbn2node_form_submit'), $form['actions']['submit']['#submit']);

      // Don't mess with normal node edits, only adds.
      if (arg(1) == 'add') {

        // @todo When we have the right circumstances, we will fetch new book
        // data from session or variables table.
        $isbn2book_data = config_get('isbn2node.settings', 'isbn2node_data');

        if ($isbn2book_data) {

          $isbn2book_data = unserialize($isbn2book_data);

          $image = _isbn2node_fetch_cover($isbn2book_data['isbn2node_isbn']);
          if (!$image && isset($isbn2book_data['xisbn'])) {
            $image = _isbn2node_fetch_cover($isbn2book_data['xisbn']);
          }

          if ($image) {
            //_isbn2node_debug("image", $image);
            // _isbn2node_debug("form['isbn2node_cover']", $form['isbn2node_cover']);

            $form['isbn2node_use_img'] = array(
              '#title' => t('Cover image from OpenLibray'),
              '#type' => 'fieldset',
              '#weight' => ($form['isbn2node_cover']['#weight']),
            );

            $form['isbn2node_use_img']['img'] = array(
              '#markup' => '<img src="' . $image . '" />',
            );

            $form['isbn2node_use_img']['isbn2node_use_img'] = array(
              '#type' => 'checkbox',
              '#title' => t('Use this image'),
              '#default_value' => 1,
            );

            // If the optional xisbn value is set, use it.
            if (isset($isbn2book_data['xisbn'])) {
              $form['isbn2node_use_img']['xisbn'] = array(
                '#type' => 'hidden',
                '#value' => $isbn2book_data['xisbn'],
              );
            }

          }
          else {
            backdrop_set_message(t('No cover image found for the ISBN @isbn. You can upload one manually.', array('@isbn' => $isbn2book_data['isbn2node_isbn'])));
          }

          foreach ($isbn2book_data as $field => $default_value) {
            switch ($field) {
              case 'title':
                $form[$field]['#default_value'] = $default_value;
                break;
              default:
                $form[$field]['und']['0']['value']['#default_value'] = $default_value;
                break;
            }
          }
        }

        // _isbn2node_debug('form=', $form);

        // We remove the previously fetched data to avoid clashes with normal node adds.
        config_clear('isbn2node.settings', 'isbn2node_data');

        break;
      }
  }
}


/*
 * Submit handler to add the book cover if the user has asked for it.
 */
function isbn2node_form_submit(&$form, &$form_state) {

  // User asked for preloaded cover.
  if (!empty($form_state["input"]["isbn2node_use_img"])) {
    if (isset($form_state["values"]["xisbn"])) {
      $xisbn = $form_state["values"]["xisbn"];
    }
    else {
      $xisbn = '';
    }
    $file = _isbn2node_save_cover($form_state["values"]["isbn2node_isbn"]['und'][0]['value'], $xisbn);
    if ($file->fid) {
      // Pump fid into form.

      $form_state['values']["isbn2node_cover"]['und'][0]["fid"] = $file->fid;
    }

    // Submission continues from here as usual.
  }
}

/*
 * Implements hook_submit
 */
function isbn2node_node_submit($node) {
  if (property_exists($node, 'isbn2node_author')) {
    // Remove trailing commas from author field before submission.

    $node->isbn2node_author['und']['0']['value'] = rtrim(trim($node->isbn2node_author['und']['0']['value']), ',');
  }
  return $node;
}

/*
 * Create form for title/ keyword search.
 * Two steps:
 * 1: Get the user's input in the title/keyword field.
 * 2: List the found titles and ask user to select a single title to fetch.
 *
 * @param array $form
 *   The "search by ISBN" form object.
 * @param array $form_state
 *   The current form values.
 *
 * @return array
 *   The form object.
 */
function isbn2node_title_form($form, &$form_state) {
  $form = array();

  if (empty($form_state['storage']['titles'])) {
    if (_isbn2node_check_settings($form)) {

      $form['title'] = array(
        '#title' => t('Book keywords'),
        '#type' => 'textfield',
        '#required' => TRUE,
        '#default_value' => '',
        '#required' => TRUE,
        '#description' => t('Enter keywords to search for, e.g. a title and/or author.'),
      );

      $submit = t('Search');
      $form['buttons']['cancel'] = array(
        '#markup' => l(t('Cancel'), 'node/add'),
        '#weight' => 150,
      );
    }
  }
  else {
    $options = array();

    // Display a message with the submitted value.
    foreach ($form_state['storage']['titles'] as $currentBook) {

      $img = _isbn2node_fetch_cover($currentBook['isbn'], 'S');

      $options[$currentBook['isbn']] = '<p class=isbn2node_form>'
        . ($img ? theme('image', array('path' => $img)) : '')
        . ' <em>' . $currentBook['title'] . '</em>' //. '<br>'
        . ' by ' . $currentBook['author'] . '<br>'
        . ' ISBN: ' . $currentBook['isbn'] . ' / ' . $currentBook['isbn13'] . '</p>';
    }

    $form['isbn'] = array(
      '#type' => 'radios',
      '#options' => $options,
      '#required' => TRUE,
    );

    $submit = t('Fetch');
    $form['buttons']['cancel'] = array(
      '#markup' => l(t('Cancel'), 'node/add/isbn2node_book/title'),
      '#weight' => 150,
    );
  }

  // Buttons.
  $form['buttons']['save'] = array(
    '#type' => 'submit',
    '#value' => $submit,
    '#weight' => 140,
  );

  return $form;
}


/*
 * Submnit handler for title / keyword search form.
 */
function isbn2node_title_form_submit(&$form, &$form_state) {

  if (isset($form_state['values']['isbn'])) {
    // Submit as on manual ISBN search.
    isbn2node_add_form_submit($form, $form_state);
  }
  else {
    // Look for title / keywords.
    $title = trim($form_state['values']['title']);

    $vals = _isbn2book_search_title($title);
    $res = array();

    // If we found at least one result, make a select form for the user.
    if ($vals->numFound > 0) {
      backdrop_set_message(t('Found @num records.', array('@num' => $vals->numFound)), 'message');

      // If we found too many results, advise adding more keywords.
      if ($vals->numFound > 10) {
        backdrop_set_message(t("You may want to add more keywords to narrow down your search.\nDisplaying results from only the first 10 records."), 'warning');
      }

      $j = 0;
      for ($i=$vals->start; $i<min(10,$vals->numFound); $i++) {
        $currentBook = $vals->docs[$i];

        $res[$i+$j]['title'] = $currentBook->title ?? '';
        $res[$i+$j]['author'] = (isset($currentBook->author_name) 
          ? join(' & ', $currentBook->author_name) : Array(''));
        if (isset($currentBook->isbn)) {
          if (count($currentBook->isbn) <= 2) {
            $res[$i+$j]['isbn'] = min($currentBook->isbn);
            $res[$i+$j]['isbn13'] = max($currentBook->isbn);
          }
          else {
            // Assuming that ISBNs are paired with both 10- and 13-digit,
            // go through the first half of the set and add them and the
            // matched ISBN-13's to results.
            for ($k=0; $k<intdiv(count($currentBook->isbn),2); $k++) {
              sort($currentBook->isbn, SORT_NUMERIC);
              $res[$i+$j]['title'] = $currentBook->title ?? '';
              $res[$i+$j]['author'] = (isset($currentBook->author_name) 
                ? join(' & ', $currentBook->author_name) : Array(''));
              $isbn10 = $currentBook->isbn[$k];
              $res[$i+$j]['isbn'] = $isbn10;
              $temp = substr($isbn10, 0, -1);
              $temp = preg_grep("/978$temp/", $currentBook->isbn);
              $res[$i+$j]['isbn13'] = array_pop($temp) ?? '';
              $j++;
            }
          }
        }
        else {
          $res[$i+$j]['isbn'] = '';
          $res[$i+$j]['isbn13'] = '';
        }
      }
      //_isbn2node_debug('$res', $res);

    }
    else {
      backdrop_set_message(t('No titles found matching @title', array('@title' => $title)), 'warning');
    }

    // Tell Form API to rebuild with the new values we're adding.
    $form_state['rebuild'] = TRUE;
    $form_state['storage']['titles'] = $res;
  }
}

